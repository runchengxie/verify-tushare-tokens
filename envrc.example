# Copy to .envrc and allow direnv to load local secrets.
# Requires direnv: https://direnv.net

# Load environment variables from .env files if they exist
dotenv_if_exists .env
dotenv_if_exists .env.local

# Re-run this script when dependency manifests change
watch_file pyproject.toml
watch_file uv.lock
watch_file requirements.txt
watch_file requirements-dev.txt

has_cmd() { command -v "$1" >/dev/null 2>&1; }

# Check if the 'dev' optional dependency group exists in pyproject.toml
has_dev_extra() {
  [ -f pyproject.toml ] || { echo 0; return; }
  python3 - <<'PY' 2>/dev/null
try:
    import pathlib
    p = pathlib.Path("pyproject.toml")
    text = p.read_text(encoding="utf-8")
    try:
        import tomllib as tomli
    except Exception:
        import tomli as tomli  # This will raise an exception on Python < 3.11 if tomli is not installed
    data = tomli.loads(text)
    od = data.get("project", {}).get("optional-dependencies", {})
    print(1 if "dev" in od else 0)
except Exception:
    print(0)
PY
}

DEV_EXTRA="$(has_dev_extra)"
USE_DEV=""
[ "$DEV_EXTRA" = "1" ] && USE_DEV="--extra dev"
# Allow disabling dev dependencies by setting NO_DEV=1
[ -n "$NO_DEV" ] && USE_DEV=""

# Ensure the virtual environment exists
ensure_venv_uv() {
  if [ ! -d .venv ]; then
    uv venv --seed || return 1
  fi
  # shellcheck disable=SC1091
  source .venv/bin/activate
}

ensure_venv_py() {
  if [ ! -d .venv ]; then
    python3 -m venv .venv || python -m venv .venv
  fi
  # shellcheck disable=SC1091
  source .venv/bin/activate
  python -m pip install --upgrade pip setuptools wheel >/dev/null 2>&1 || true
}

if has_cmd uv; then
  # Prefer using uv if available
  if ensure_venv_uv; then
    if [ -f uv.lock ]; then
      uv sync --frozen $USE_DEV || echo "warning: uv sync failed, the environment might be incomplete" >&2
    else
      uv sync $USE_DEV || echo "warning: uv sync failed, the environment might be incomplete" >&2
    fi
  else
    echo "notice: uv venv failed, falling back to python venv + pip" >&2
    ensure_venv_py
  fi
else
  echo "notice: uv not detected, using the python venv + pip method" >&2
  ensure_venv_py
  # Installation strategy when using pip
  if [ -f requirements-dev.txt ] && [ -z "$NO_DEV" ]; then
    pip install -r requirements-dev.txt || echo "warning: failed to install requirements-dev.txt" >&2
  elif [ -f requirements.txt ]; then
    pip install -r requirements.txt || echo "warning: failed to install requirements.txt" >&2
  elif [ -f pyproject.toml ]; then
    if [ -z "$NO_DEV" ] && [ "$DEV_EXTRA" = "1" ]; then
      pip install -e ".[dev]" || echo 'warning: failed to install ".[dev]" with pip' >&2
    else
      pip install -e . || echo 'warning: failed to install "." with pip' >&2
    fi
  fi
fi
